CHECKLIST DOS REQUISITOS DO PROJETO INTEGRADOR (APP DESKTOP)


Geral

(  ) Livre de exceções 
É imprescindível que o programa funcione sem defeitos (exceções ou erros).

(  ) Listagem completa
Ao abrir um formulário de CONSULTA, a tabela deve exibir todos os registros das entidades já cadastradas. Isso equivale à uma pesquisa "SELECT * FROM entidade".

(  ) Operações CRUD no form
Cada cadastro deve ser formado por duas telas (forms): form de cadastro e form de consulta. No forma de cadastro, deve haver botões para SALVAR (GRAVAR NOVO e EDITAR) e REMOVER. Além disso, deve ser possível acessar o form de consulta para obter os dados de cadastros já realizados.

(  ) Testes de uso
Antes de entregar o projeto, faça os seguintes testes para assegurar-se de que inexistem erros corriqueiros que podem prejudicá-lo severamente na avaliação. Para cada cadastro/processo, siga os passos abaixo:
1) insira pelo menos 3 registros; abra e feche o formulário;
2) faça 1 consulta e pressione Ok; feche e abra o formulário;
3) faça 1 consulta e pressione Voltar; feche e abra o formulário;
4) faça 1 edição; feche e abra o formulário;
5) faça 1 remoção; feche e abra o formulário.
OBS: talvez algum destes possa ajudá-los a automatizar esse processo: http://en.wikipedia.org/wiki/List_of_GUI_testing_tools

Relacionamentos entre entidades

(  ) Dependências claras:
Cadastros ou regras de negócio que possuem pré-requisitos devem informar claramente tal necessidade ao usuário. Como exemplo: se no cadastro de TURMA é preciso ter previamente cadastro um PROFESSOR, então ao entrar no cadastro de TURMA o app checa se existe ao menos um PROFESSOR cadastrado. Em caso positivo, procede normalmente. Em caso negativo, avisa o usuário com um dialog "É preciso ter um PROFESSOR cadastrado para realizar o cadastro de TURMAS". Ao pressionar OK, deve abrir o formulário para cadsatro do PROFESSOR. Ao retornar, deve atualizar o formulário de TURMA, caso necessário.

(  ) Campos de relacionamento (botão PESQUISAR ao lado do campo de relacionamento)
Todos os campos de relacionamento (ex: no cadastro de TURMA deve informar o PROFESSOR) devem permitir o acesso ao form de consulta da entidade relacionada (neste caso, o PROFESSOR) para pesquisá-la. Por padrão, utilize campos de texto (TextField) para representar os campos de relacionamento (campos ID e NOME), que são preenchidos após o usuário relaizar uma consulta. Em casos onde a entidade relacionada não contenha muitos registros (no máximo 10), pode-se usar um combobox para representar o relacionamento.

(  ) Atalho para inclusão de relacionamentos (botão INCLUIR ao lado do campo de relacionamento)
Todos os campos que referem-se à relacionamentos (ex: no processo de ORÇAMENTO haverão campos para informar o cadastro do CLIENTE, do FUNCIONARIO e dos PRODUTOS), devem estar acompanhados de um botão de atalho para os cadastros aos quais se relacionam. Ao retornar, deve atualizar campo de relacionamento, caso necessário.

(  ) Consulta por dado parcial
Os formulários de consulta devem permitir filtragem dos resultados mostrados nas tabelas por meio de preenchimento parcial dos campos de busca. Ex: No form de consulta de CLIENTE, preencher "arc" no campo de pesquisa por NOME deve listar na tabela de registros os clientes de nome "Marcos", "Marcio", "Marcela", "Marcel", etc.

Formulários

(  ) Campo ID não editável
Todos os forms devem conter o campo ID (não editável).

(  ) Forms longos em abas
Formulários longos (aqueles que possuem uma extensa lista de campos) devem agrupar os campos e colocar tais grupos em abas distintas, utilizando o JTabbedPane (Painel com Guias).

(  ) Campos sempre habilitados
Ao abrir um formulário ele deve estar com os campos habilitados (salvo em caso de alguma regra de negócio), não exigindo que o usuário pressione o botão "novo", "incluir" ou "adicionar" para habilitá-los.

(  ) Limpar após inserir 
Após executar uma operação sobre um registro no formulário de cadastro (INSERT, UPDATE ou DELETE), os campos devem ter seus valores reiniciados. Como exemplo, campos de texto devem ficar vazios e JComboBox devem voltar à primeira opção da lista.

Validação

(  ) Combobox "Selecione uma..."
A primeira opção de cada JComboBox deve sempre ser "Selecione uma opção". Os métodos de validação dos cadastros devem considerá-la inválida para fins de inclusão ou alteração de registros.

(  ) Campos requeridos
Os campos requeridos devem ser verificados ao pressionar o botão OK. No entanto, não é necessário que todos os campos dos formulários sejam requeridos. Marque os requeridos com um asterisco (*) e limite sua quantidade à 5 campos por form.

(  ) Campos preenchidos erroneamente
Os campos que possuem regras explícitas de preenchimento (ex: datas ou e-mails) devem utilizar algum método de filtragem ou validação. Campos típicos que devem utilizar máscara: data, cep, placa (veículo), CPF, CNPJ ou código específico da sua aplicação. Campos que podem usar formatação: moeda, telefone, etc. 
Tutorial: http://docs.oracle.com/javase/tutorial/uiswing/components/formattedtextfield.html

(  ) Número de teste para CPF e CNPJ
Permita que campos CPF e CNPJ passem pela validação com zeros (ex: 000.000.000-00).

(  ) Indicativo de erros no preenchimento do form
Ao pressionar o botão de confirmação do formulário ("inserir", "ok", etc.), o aplicativo deve realizar validação dos campos. Caso encontre erros (campos requeridos vazios ou preenchidos indevidamente), deve informar o usuário. Para isso, deve: (1) exibir caixa de mensagem JOptionPane informando o problema, (2) colorir a borda de todos os campos incorretos (e opcionalmente o JLabel que o acompanha) e (3) permanecer no formulário.

Código/Projeto NetBeans

(  ) Executar com F6
O projeto deve estar corretamente configurado de forma que posso ser executado ao pressionar F6. Para isso, a classe que inicia o seu app, deve estar definida como principal, nas propriedades do projeto.

(  ) Config do banco de dádos
Os dados para conexão com o banco devem estar distintamente definidos em uma classe chamada DataBaseConfig, no pacote "config". Ex:

public class DatabaseConfig {
   public static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";
   public static final String DATABASE_URL = "jdbc:mysql://localhost/aluno";
   public static final String DATABASE_USER = "aluno";
   public static final String DATABASE_PASSWORD = "aluno";
   public static final String HIBERNATE_SHOW_SQL = "true";
   public static final String HIBERNATE_FORMAT_SQL = "false";
   public static final String HIBERNATE_CREATE_TABLES = "update";
}
 